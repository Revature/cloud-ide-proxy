env ENCRYPTION_KEY;

# Explicitly set paths
pid /usr/local/openresty/nginx/logs/nginx.pid;
error_log /usr/local/openresty/nginx/logs/error.log;

events {
    worker_connections 1024;
}

http {
    # Define temp paths
    client_body_temp_path /usr/local/openresty/nginx/client_body_temp;
    proxy_temp_path /usr/local/openresty/nginx/proxy_temp;
    fastcgi_temp_path /usr/local/openresty/nginx/fastcgi_temp;
    uwsgi_temp_path /usr/local/openresty/nginx/uwsgi_temp;
    scgi_temp_path /usr/local/openresty/nginx/scgi_temp;
    
    # Set access log path
    access_log /usr/local/openresty/nginx/logs/access.log;

    lua_package_path '/usr/local/openresty/lualib/?.lua;;';
    
    init_by_lua_block {
        require "resty.aes"
        require "resty.string"
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    server {
        listen 8020;

        location ~ ^/dest/(?<encrypted_ip>[A-Za-z0-9_-]+)(/.*)?$ {
            set_by_lua_block $target_ip {
                
                local aes = require "resty.aes"
                local str = require "resty.string"

                local key = os.getenv("ENCRYPTION_KEY")
                if not key then
                    ngx.log(ngx.ERR, "Missing ENCRYPTION_KEY environment variable")
                    return
                end

                local aes_128_cbc_with_iv = assert(aes:new(key,
                    nil, aes.cipher(128,"cbc"), {key}))
                
                -- Handle actual encrypted IP from URL
                local base64_actual = ngx.var.encrypted_ip:gsub("-", "+"):gsub("_", "/")
                local padding = 4 - ((#base64_actual) % 4)
                if padding ~= 4 then
                    base64_actual = base64_actual .. string.rep("=", padding)
                end
                
                -- Decode the Base64 string before decryption
                local decoded = ngx.decode_base64(base64_actual)
                
                -- Set the target_ip variable to the decrypted value
                local decrypted = aes_128_cbc_with_iv:decrypt(decoded)
                return decrypted;
            }

            set $forward_path $2;
            if ($forward_path = "") {
                set $forward_path "/";
            }            
            rewrite ^/dest/[^/]+(/.*)?$ $1 break;

            proxy_pass http://$target_ip:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
        }
    }
}