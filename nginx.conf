env ENCRYPTION_KEY;

# Explicitly set paths
pid /usr/local/openresty/nginx/logs/nginx.pid;
error_log /usr/local/openresty/nginx/logs/error.log;

events {
    worker_connections 1024;
}

http {

    lua_shared_dict cache 10m;  # Shared memory space for caching

    # Define temp paths
    client_body_temp_path /usr/local/openresty/nginx/client_body_temp;
    proxy_temp_path /usr/local/openresty/nginx/proxy_temp;
    fastcgi_temp_path /usr/local/openresty/nginx/fastcgi_temp;
    uwsgi_temp_path /usr/local/openresty/nginx/uwsgi_temp;
    scgi_temp_path /usr/local/openresty/nginx/scgi_temp;
    
    # Set access log path
    access_log /usr/local/openresty/nginx/logs/access.log;

    lua_package_path '/usr/local/openresty/lualib/?.lua;;';
    
    init_by_lua_block {

        local aes = require "resty.aes"
        local str = require "resty.string"
        local iv = "0000000000000000"

        -- Retrieve and validate the encryption key at startup
        local ENCRYPTION_KEY = os.getenv("ENCRYPTION_KEY")
        if not ENCRYPTION_KEY or #ENCRYPTION_KEY ~= 16 then
            ngx.log(ngx.ERR, "Invalid ENCRYPTION_KEY: Must be exactly 16 bytes")
            ENCRYPTION_KEY = nil  -- Prevent usage if invalid
        end

        -- Predefine AES cipher instance for reuse
        if ENCRYPTION_KEY then
            cipher = aes:new(ENCRYPTION_KEY, nil, aes.cipher(128, "cbc"), { iv = iv, method = nil, padding = true })
            if not cipher then
                ngx.log(ngx.ERR, "Failed to initialize AES cipher")
                ENCRYPTION_KEY = nil
            end
        end
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    server {
        listen 8020;

        # Proxy websockets with an encrypted IP
        location ~ ^/dest/(?<encrypted_ip>[A-Za-z0-9_-]+)(/.*)?$ {

            set_by_lua_block $target_ip {

                local encrypted_ip = ngx.var.encrypted_ip
                -- Try fetching decrypted IP from cache first
                local cached_value = ngx.shared.cache:get(encrypted_ip)
                if cached_value then
                    return cached_value
                end
                -- Handle actual encrypted IP from URL
                local base64_actual = encrypted_ip:gsub("-", "+"):gsub("_", "/")
                local padding = 4 - ((#base64_actual) % 4)
                if padding ~= 4 then
                    base64_actual = base64_actual .. string.rep("=", padding)
                end
                -- Decode the Base64 string before decryption
                local decoded = ngx.decode_base64(base64_actual)
                -- Set the target_ip variable to the decrypted value
                local decrypted = cipher:decrypt(decoded)
                -- Cache the result for subsequent requests
                if decrypted then
                    ngx.log(ngx.NOTICE, "Decrypted the ip: "..encrypted_ip.." to: "..decrypted)
                else
                    ngx.log(ngx.NOTICE, "Failed to decrypt the ip: "..decrypted)
                end
                ngx.shared.cache:set(encrypted_ip, decrypted, 120)  -- Cache for 120 seconds
                return decrypted;
            }
   
            rewrite ^/dest/[^/]+(/.*)?$ $1 break;
            proxy_pass http://$target_ip:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
        }

        # Proxy requests from /api/ to localhost:8000/api/
        location ~ ^/api/(.*)$ {
            proxy_pass http://172.20.0.1:8000/$1;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}